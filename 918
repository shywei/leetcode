/*
给定一个由整数数组 A 表示的环形数组 C，求 C 的非空子数组的最大可能和。

在此处，环形数组意味着数组的末端将会与开头相连呈环状。（形式上，当0 <= i < A.length 时 C[i] = A[i]，而当 i >= 0 时 C[i+A.length] = C[i]）

此外，子数组最多只能包含固定缓冲区 A 中的每个元素一次。（形式上，对于子数组 C[i], C[i+1], ..., C[j]，不存在 i <= k1, k2 <= j 其中 k1 % A.length = k2 % A.length）

 

示例 1：

输入：[1,-2,3,-2]
输出：3
解释：从子数组 [3] 得到最大和 3
示例 2：

输入：[5,-3,5]
输出：10
解释：从子数组 [5,5] 得到最大和 5 + 5 = 10
示例 3：

输入：[3,-1,2,-1]
输出：4
解释：从子数组 [2,-1,3] 得到最大和 2 + (-1) + 3 = 4
示例 4：

输入：[3,-2,2,-3]
输出：3
解释：从子数组 [3] 和 [3,-2,2] 都可以得到最大和 3
示例 5：

输入：[-2,-3,-1]
输出：-1
解释：从子数组 [-1] 得到最大和 -1

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/maximum-sum-circular-subarray
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
*/

/**
个人思路：
环形数组的所有情况都包含在A[0]->A[N],A[0]->A[N-1]的新数组中
最大值不以负数开头，也不以和负数的组合开头（除非所有都为负数）
*/
public static int maxSubarraySumCircular(int[] A) {
        int maxValue = A[0];
        int num = A.length;
        for(int i =0 ;i<num;i++) {
        	if(A[i]>maxValue) {
    			maxValue = A[i];
    		}
        	if(A[i] <= 0) {
        		continue;
        	}
        	int subMaxValue = A[i];
        	for(int j=1;j<num;j++) {
        		if(i+j>=num) {
        			subMaxValue = subMaxValue + A[i+j-num];
        		}else {
        			subMaxValue = subMaxValue + A[i+j];
        		}
        		if(subMaxValue <0) {
        			break;
        		}
        		if(subMaxValue > maxValue) {
        			maxValue = subMaxValue;
        		}
        	}
        }
        return maxValue;
    }
	
  /**
  官方题解之一
  */
	public static int maxSubarraySumCircular2(int[] A) {
        int N = A.length;

        // Compute P[j] = B[0] + B[1] + ... + B[j-1]
        // for fixed array B = A+A
        int[] P = new int[2*N+1];
        for (int i = 0; i < 2*N; ++i)
            P[i+1] = P[i] + A[i % N];

        // Want largest P[j] - P[i] with 1 <= j-i <= N
        // For each j, want smallest P[i] with i >= j-N
        int ans = A[0];
        // deque: i's, increasing by P[i]
        Deque<Integer> deque = new ArrayDeque();
        deque.offer(0);

        for (int j = 1; j <= 2*N; ++j) {
            // If the smallest i is too small, remove it.
            if (deque.peekFirst() < j-N)
                deque.pollFirst();

            // The optimal i is deque[0], for cand. answer P[j] - P[i].
            ans = Math.max(ans, P[j] - P[deque.peekFirst()]);

            // Remove any i1's with P[i2] <= P[i1].
            while (!deque.isEmpty() && P[j] <= P[deque.peekLast()])
                deque.pollLast();

            deque.offerLast(j);
        }

        return ans;
    }
	
  /**
  更巧妙的一种思路：
  分三种情况，取最大值：
  非环形数组的最大子串和
  全负数时的最大元素
  需要跨头尾的情况：数组总和减去最小的子串和
  */
	public static int maxSubarraySumCircular3(int[] A) {
        int maxItem = A[0];
        int maxTotal = 0; 
        int minTotal = 0; 
        int currentMaxTotal = 0; 
        int currentMinTotal = 0; 
        int num = A.length;
        int total =0;
        for(int i =0 ;i<num;i++) {
        	maxItem = Math.max(maxItem, A[i]);
          // 计算非环形数组子串最大值时只需要把小于0的前序子串看做0就行（也就是我自己所谓的最大值不以负数开头，也不以和负数的组合开头，但这样遍历）
        	currentMaxTotal = Math.max(0, A[i]+currentMaxTotal);
        	maxTotal = Math.max(currentMaxTotal, maxTotal);
        	currentMinTotal = Math.min(0, A[i]+currentMinTotal);
        	minTotal = Math.min(currentMinTotal, minTotal);
        	total = total + A[i];
        }
        
        // 全部为负数的情况
        if(maxItem < 0) {
        	return maxItem;
        }
        return Math.max(total - minTotal, maxTotal);
    }
    
   这道题个人的思路跟下面两种都或多或少有点关联，但执行效率却相差很多。尤其第二种思路中的队列是自己的知识盲区，需要加强。
