/*
	回旋镖定义为一组三个点，这些点各不相同且不在一条直线上。
	给出平面上三个点组成的列表，判断这些点是否可以构成回旋镖。
	points.length == 3
	points[i].length == 2
	0 <= points[i][j] <= 100
	来源：力扣（LeetCode）
	链接：https://leetcode-cn.com/problems/sum-of-root-to-leaf-binary-numbers
	著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
*/
	 

public static boolean isBoomerang(int[][] points) {
	/* 思路：构成三角形则不会共线，三角形任意两边长度大于第三边 */
	double length1 = Math.sqrt((points[0][0]-points[1][0])*(points[0][0]-points[1][0]) + (points[0][1]-points[1][1])*(points[0][1]-points[1][1]));
	double length2 = Math.sqrt((points[0][0]-points[2][0])*(points[0][0]-points[2][0]) + (points[0][1]-points[2][1])*(points[0][1]-points[2][1]));
	double length3 = Math.sqrt((points[1][0]-points[2][0])*(points[1][0]-points[2][0]) + (points[1][1]-points[2][1])*(points[1][1]-points[2][1]));
	if(length1 + length2 > length3 && length1 + length3 > length2 && length2 + length3 > length1) {
		return true;
	}
	return false;
}
	
public static boolean isBoomerang2(int[][] points) {
	/*
	 * 更简单的计算思路：考虑从第一点到二三两点构成的直线与X轴的角度，角度相同则共线.考虑到除法会有0的问题，变换一下计算方式，用乘法
	 */
	// double tan1 = (points[0][1]-points[1][1])/(points[0][0]-points[1][0]);
	// double tan2 = (points[0][1]-points[2][1])/(points[0][0]-points[2][0]);
	// if(tan1 == tan 2)

	if((points[0][1]-points[1][1])* (points[0][0]-points[2][0]) == (points[0][0]-points[1][0])*(points[0][1]-points[2][1])) {
		return false;
	}
	return true;
}
