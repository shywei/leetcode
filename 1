/*
给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。

你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。

示例:

给定 nums = [2, 7, 11, 15], target = 9

因为 nums[0] + nums[1] = 2 + 7 = 9 所以返回 [0, 1]
	 
来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/sum-of-root-to-leaf-binary-numbers
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
*/
	 
public static int[] twoSum(int[] nums, int target) {
	HashMap<Integer, Integer> indexMap = new HashMap<Integer, Integer>();
	for(int i=0;i< nums.length;i++) {
		int couple = target-nums[i];
		if(indexMap.containsKey(couple)) {
			return new int[] {indexMap.get(couple), i};
		}
		indexMap.put(nums[i], i);
	}

	return new int[] {-1,-1};
}

/* 
思路：利用hashmap记录数组下标和值，遍历数组找到与之匹配的已遍历过的值 
*/
