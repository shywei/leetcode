/**
	 * 给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。
	 * 
	 * 你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。
	 * 
	 * 示例:
	 * 
	 * 给定 nums = [2, 7, 11, 15], target = 9
	 * 
	 * 因为 nums[0] + nums[1] = 2 + 7 = 9 所以返回 [0, 1]
	 * 
	 * @param nums
	 * @param target
	 * @return
	 */
	public static int[] twoSum(int[] nums, int target) {
		/* 思路：利用hashmap记录数组下标和值，遍历数组找到与之匹配的已遍历过的值 */
		HashMap<Double, Integer> lowerHalf = new HashMap<Double, Integer>();
		HashMap<Double, Integer> upperHalf = new HashMap<Double, Integer>();
		double halfValue = (double)target/2;
		int halfIndex1 = -1, halfIndex2 = -1;
		for(int i=0;i< nums.length;i++) {
			double res = nums[i] - halfValue;
			if(res > 0) {
				if(lowerHalf.containsKey(res * -1)) {
					return new int[] {lowerHalf.get(res * -1), i};
				}
				upperHalf.put(res, i);
			}else if(res < 0){
				if(upperHalf.containsKey(res * -1)) {
					return new int[] {upperHalf.get(res * -1), i};
				}
				lowerHalf.put(res,i);
			}else if(halfIndex1 == -1){
				halfIndex1 = i;
			}else {
				halfIndex2 = i;
				return new int[] {halfIndex1, halfIndex2};
			}
		}

		return new int[] {-1,-1};
    }
