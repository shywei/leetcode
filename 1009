/*
每个非负整数 N 都有其二进制表示。例如， 5 可以被表示为二进制 "101"，11 可以用二进制 "1011" 表示，依此类推。注意，除 N = 0 外，任何二进制表示中都不含前导零。

二进制的反码表示是将每个 1 改为 0 且每个 0 变为 1。例如，二进制数 "101" 的二进制反码为 "010"。

给定十进制数 N，返回其二进制表示的反码所对应的十进制整数。

 

示例 1：

输入：5
输出：2
解释：5 的二进制表示为 "101"，其二进制反码为 "010"，也就是十进制中的 2 。
示例 2：

输入：7
输出：0
解释：7 的二进制表示为 "111"，其二进制反码为 "000"，也就是十进制中的 0 。
示例 3：

输入：10
输出：5
解释：10 的二进制表示为 "1010"，其二进制反码为 "0101"，也就是十进制中的 5 。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/complement-of-base-10-integer
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
*/


/**
N与其反码的和为2^(n-1) - 1，n为N的二进制长度
*/
public static int bitwiseComplement(int N) {
  return (2 << Integer.toBinaryString(N).length()-1) - N - 1;
}

/**
与上面一样的思路，不过Integer.toBinaryString性能较差
*/
public static int bitwiseComplement(int N) {
  int num = 2;
  while(num <= N) {
    num = num << 1;
  }
  return num -N -1;
}
 
/**
N与1111...111异或
*/
 public static int bitwiseComplement(int N) {
  int num = 1;
  while(num < N) {
    num = (num<<1) + 1;
  }
  return N ^ num;
}

/*
这道题主要知识点是位运算

假设整数变量 A 的值为 60 (111100)和变量 B 的值为 13 (1101)：

java操作符  描述              
&          如果相对应位都是1，则结果为1，否则为0	（A＆B），得到12，即0000 1100
|          如果相对应位都是 0，则结果为 0，否则为 1	（A | B）得到61，即 0011 1101
^          如果相对应位值相同，则结果为0，否则为1	（A ^ B）得到49，即 0011 0001
〜         按位取反运算符翻转操作数的每一位，即0变成1，1变成0。	（〜A）得到-61，即1100 0011
<<         按位左移运算符。左操作数按位左移右操作数指定的位数。	A << 2得到240，即 1111 0000
>>         按位右移运算符。左操作数按位右移右操作数指定的位数。	A >> 2得到15即 1111
>>> 	     按位右移补零操作符。左操作数的值按右操作数指定的位数右移，移动得到的空位以零填充。	A>>>2得到15即0000 1111

*/
